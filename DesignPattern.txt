    物件導向程式設計的主體是物件與類別，藉由他們的合作完成系統整體的運作。
    他是以物件為抽象的中心點，類別是抽象不存在的，可以把它當成一個想像，
而物件就是將這個想像的東西給實體化。
    在寫一個系統時，通常先進行使用者需求分析，然後根據此分析寫系統，uml是
非常好用的一套物件導向模組語言，規劃完之後開始CODING如此可使程式碼的架構
速度更為直接埋頭撰寫快。
    模組開發時盡可能遵守大原則，降低耦合、提高內聚、不要重複(資料以及計
算應該存在一個地方而不要造成重複，寫成函式呼叫)、資訊隱藏封裝(私有成員)，
還有迪密特原則(這個很重要，每個單元盡可能擁有最少知識為原則)。
    Design pattern則用來輔助物件導向系統的開發，它用來解決系統設計上的特
定問題